@model Battleships.Core.ViewModels.LobbyViewModel
@{
    ViewBag.Title = "Lobby";
}
<h2>Lobby</h2>
<div class="row justify-content-md-center">
    <div class="navbar col-md-2 d-none d-md-block ">
        <div class="bg-dark pt-2" id="people-list">
            <!-- User list -->
            @{Html.RenderPartial("_UserList",Model.UserList); }
            <!--end user list -->
        </div>
    </div>
    <main class="col-md-8 ml-sm-auto col-lg-10 px-4 pt-2 ">
        <div class="chat pb-2 ">
            <div class="chat-header clearfix">
                <div class="chat-about">
                    <div class="chat-with">Public Chat</div>
                </div>
                <i class=""></i>
            </div> <!-- end chat-header -->
            <div class="chat-history">
                <ul id="chat-body"></ul>
            </div>
            <div class="chat-message clearfix">
                <div class="write-form">
                    <textarea id="message" placeholder="Type your message" rows="2"></textarea>
                </div>
                <div class="text-center  ">
                    <button class=" btn btn-info" id="sendmessage">Send</button>
                </div>
                
            </div> <!-- end chat-message -->
        </div> <!-- end chat -->
    </main>
</div>


@section scripts {
    <!--Script references. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.lobbyHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                 if (name == "@Model.CurrentUser") {
                     $('#chat-body').append('<li><strong><span class="float-right">:' + htmlEncode(name)
                         + '</span></strong><div class="this-user talk-bubble tri-right left-in">' +
                        ' <div class="talktext"><span class="word-wrap">' + htmlEncode(message) + '</span></div>' +
                        '</div ></li > ');
                } else {
                     $('#chat-body').append('<li><strong><span class="float-left">' + htmlEncode(name)
                         + ':</span></strong> <div class="other-user talk-bubble tri-right left-in">' +
                        ' <div class="talktext"><span class="word-wrap">' + htmlEncode(message) + '</span></div>' +
                        '</div ></li > ');
                }



                

            };
            // Get the user name and store it to prepend to messages.
             var displayName = "@Model.CurrentUser"
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    if ($('#message').val().length != 0) {
                        chat.server.send(displayName, $('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    }
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}

